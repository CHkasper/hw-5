import asyncio
import logging
import schedule
import math
import re
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from database import add_user, update_schedule, get_scheduled_users, get_all_users
from config import load_dotenv
import os
import datetime

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=menu
    )

@dp.message(lambda msg: msg.location is not None)
async def location_handler(message: Message):
    chat_id = message.chat.id
    name = message.from_user.full_name
    latitude = message.location.latitude
    longitude = message.location.longitude

    add_user(chat_id, name, latitude, longitude)

    await message.answer("‚úÖ –í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=menu)

@dp.message(lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def nearest_user(message: Message):
    users = get_all_users()
    chat_id = message.chat.id

    my_user = next((user for user in users if user[0] == chat_id), None)

    if not my_user:
        await message.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    my_lat, my_lon = my_user[2], my_user[3]

    if len(users) < 2:
        await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    other_users = [user for user in users if user[0] != chat_id]

    closest_user = min(other_users, key=lambda user: haversine(my_lat, my_lon, user[2], user[3]))

    await message.answer(
        f"üë§ –ë–ª–∏–∂–∞–π—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {closest_user[1]} (ID: {closest_user[0]})\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {haversine(my_lat, my_lon, closest_user[2], closest_user[3]):.2f} –∫–º"
    )

@dp.message(lambda msg: msg.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def set_schedule(message: Message):
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM ")

@dp.message()
async def receive_schedule_time(message: Message):
    if re.match(r"^\d{2}:\d{2}$", message.text):
        update_schedule(message.chat.id, message.text)
        await message.answer(f"‚úÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}!")
    else:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

async def send_message_task(chat_id):
    try:
        await bot.send_message(chat_id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

def run_send_message_task(chat_id):
    asyncio.create_task(send_message_task(chat_id))

async def schedule_messages():
    users = get_scheduled_users()
    if not users:
        logging.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
    else:
        for chat_id, schedule_time in users:
            schedule.every().day.at(schedule_time).do(run_send_message_task, chat_id)

async def send_scheduled_messages():
    while True:
        users = get_scheduled_users()
        now = datetime.datetime.now().strftime("%H:%M")

        for chat_id, schedule_time in users:
            if schedule_time == now:
                asyncio.create_task(send_message_task(chat_id))

        await asyncio.sleep(60)

async def main():
    asyncio.create_task(send_scheduled_messages())
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        pass
    finally:
        print("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")

if __name__ == "__main__":
    asyncio.run(main())
